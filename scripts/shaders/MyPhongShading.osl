#include "stdosl.h"

shader MyPhongShading (
        normal Normal = N,
        color ColorSpecular = 0.0,
        color ColorAmbient = 0.0,
        color ColorDiffus = 0.0,
        float SizeSpecular = 100,
        vector PosLight = 0.0,
        vector PosCamera = I,
        output color Color = 0.0
    ) 
{
    
    // Transform vectors to world coordinates
    vector NormalTransformed = normalize(transform("world", Normal));
    vector CurrentPointTransformed = transform("world", P);
    vector PosLightTransformed = transform("world", PosLight);
    vector PosCameraTransformed = transform("world", PosCamera);
    
    // Compute the light vector
    vector LightVector = normalize(PosLightTransformed - CurrentPointTransformed);
    
    // #### PHONG ####
    color Ks = ((SizeSpecular + 8) / (8 * M_PI)) * ColorSpecular;
    
    vector Hvalue = normalize(LightVector + PosCameraTransformed); 
    // length(LightVector + ViewVector);
    
    color Phong = Ks * pow(max(dot(NormalTransformed, Hvalue), 0), SizeSpecular);
    
    // #### LAMBERT ####
    float LambertTemp = max(dot(LightVector, NormalTransformed), 0);
    
    color Lambert =  (ColorDiffus/M_PI) * LambertTemp;
    
    // Add everything for the output
    Color = ColorAmbient + Lambert + Phong;
}